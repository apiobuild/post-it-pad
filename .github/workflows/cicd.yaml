on:
  pull_request:
  push:
    branches: [develop]
  release:
    types: [published]
jobs:
  build_container:
    runs-on: ubuntu-latest
    name: build docker container
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Github Deploy App Token
        id: deploy_app_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets._GITHUB_DEPLOY_APP_ID }}
          private_key: ${{ secrets._GITHUB_DEPLOY_APP_KEY }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get Docker Image Tag
        id: get_image_tag
        run: |
          DOCKER_IMAGE=apiobuild/post-it-pad
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: build and publish docker image
        uses: docker/build-push-action@v2
        env:
          TOKEN: ${{ steps.deploy_app_token.outputs.token }}
        with:
          repository: apiobuild/post-it-pad
          tags: ${{ steps.prep.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${TOKEN}
          # push: ${{ startsWith(github.ref, 'refs/tags/') ||  startsWith(github.ref, 'refs/heads/develop') }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
